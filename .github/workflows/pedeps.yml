name: GitHub-CI for pedeps

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu GCC", artifact: "linux.tar.bz2",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++",
            configure_method: "", build_method: "make"
          }
        - {
            name: "macOS Clang", artifact: "macos.tar.bz2",
            os: macos-latest,
            cc: "clang", cxx: "clang++",
            configure_method: "", build_method: "make"
          }
        - {
            name: "Windows MinGW", artifact: "win64-MinGW.tar.bz2",
            os: windows-latest,
            cc: "x86_64-w64-mingw32-gcc.exe", cxx: "x86_64-w64-mingw32-g++.exe",
            configure_method: "", build_method: "make"
          }
#        - {
#            name: "winlibs 32-bit", artifact: "win32-winlibs.tar.bz2",
#            os: windows-latest,
#            cc: "gcc.exe", cxx: "g++.exe", winlibs_bits: "32", winlibs_url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/10.2.0-11.0.0-9.0.0-r3/winlibs-i686-posix-dwarf-gcc-10.2.0-mingw-w64-8.0.0-r3.7z",
#            configure_method: "", build_method: "make"
#          }
#        - {
#            name: "winlibs 64-bit", artifact: "win64-winlibs.tar.bz2",
#            os: windows-latest,
#            cc: "gcc.exe", cxx: "g++.exe", winlibs_bits: "64", winlibs_url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/10.2.0-11.0.0-9.0.0-r3/winlibs-x86_64-posix-seh-gcc-10.2.0-mingw-w64-8.0.0-r3.7z",
#            configure_method: "", build_method: "make"
#          }
    steps:
    - uses: actions/checkout@v1
#    - if: contains( matrix.config.name, 'winlibs' )
#      name: Install winlibs
#      run: |
#        curl -k -L -# -o winlibs.7z ${{ matrix.config.winlibs_url }}
#        7z x -y -bd -oD:\Prog\winlibs winlibs.7z
#        Remove-Item winlibs.7z
#        echo "D:\Prog\winlibs\mingw${{ matrix.config.winlibs_bits }}\bin" >> $env:GITHUB_PATH
#        echo "CC=gcc" >> $GITHUB_ENV
#        echo "CXX=g++" >> $GITHUB_ENV
    - if: matrix.config.cc == 'cl'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.config.arch }}
#    - name: Configure
#      run: |
#        echo "MAKEDIR=." >> $env:GITHUB_ENV
    - if: matrix.config.build_method == 'make'
      name: Build libavl
      run: |
        curl -# http://ftp.debian.org/debian/pool/main/liba/libavl/libavl_0.3.5.orig.tar.gz --output libavl.tar.gz
        tar xfz libavl.tar.gz
        cd avl-0.3.5
        ${{ matrix.config.cc }} -O2 -fomit-frame-pointer -pipe -w -c -o avl.o avl.c
        ar rcs libavl.a avl.o
        mkdir -p ../deps/include
        mkdir -p ../deps/lib
        sed -e "s/\(avl_node_t \*new\)/\1node/g" avl.h > ../deps/include/avl.h
        cp libavl.a ../deps/lib/
        pwd
    - if: matrix.config.build_method == 'make'
      name: Build + install (make)
      run: |
        pwd
        ls -l
        ${{ matrix.config.cc }} --version
        make install PREFIX=build_result DOXYGEN= CC=${{ matrix.config.cc }} CFLAGS="-O3 -Ilib -Ideps/include" AVLLIBS="-Ldeps/lib -lavl"
#        echo "LD_LIBRARY_PATH=$(pwd)/build_result/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV



####TO DO: dependancy from: http://ftp.debian.org/debian/pool/main/liba/libavl/libavl_0.3.5.orig.tar.gz
